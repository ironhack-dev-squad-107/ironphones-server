{"version":3,"sources":["components/HomePage.js","components/NotFound.js","api.js","components/RecentPhones.js","components/PhoneDetails.js","components/AddPhone.js","components/LoginPage.js","components/SignupPage.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","react_default","a","createElement","className","Component","NotFound","backendApi","axios","create","baseURL","process","withCredentials","errorHandler","err","response","data","console","log","alert","RecentPhones","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","phoneArray","_this2","get","catch","then","setState","Link","to","map","onePhone","key","_id","phone","concat","phoneModel","brand","price","src","image","PhoneDetails","phoneItem","phoneId","params","match","specs","createdAt","AddPhone","isSubmitSuccessful","event","_event$target","target","name","value","defineProperty","newPhoneSubmission","preventDefault","post","_this3","_event$target2","files","uploadData","FormData","append","postFile","fileUrl","_this4","Redirect","onSubmit","handleSubmit","onChange","genericOnChange","type","placeholder","uploadOnChange","LoginPage","email","originalPassword","loginCredentials","loginSuccess","currentUser","SignupPage","fullName","userSubmission","signupSuccess","App","userInfo","localStorage","getItem","JSON","parse","newUser","setItem","stringify","removeItem","updateUser","NavLink","exact","onClick","logoutClick","Switch","Route","path","component","render","src_components_SignupPage","user","src_components_LoginPage","Boolean","window","location","hostname","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.541526ba.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./HomePage.css\";\n\nclass HomePage extends Component {\n  render() {\n    return (\n      <section className=\"HomePage\">\n        <h2>Home Page</h2>\n        <p>Welcome to Ironphones! Your favorite store for overpriced phones.</p>\n      </section>\n    );\n  }\n}\n\nexport default HomePage;\n","import React, { Component } from \"react\";\n\nimport \"./NotFound.css\";\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <section className=\"NotFound\">\n        <h2>404 Not Found</h2>\n\n        <p>Sorry, the page you’re looking for doesn’t exist.</p>\n      </section>\n    );\n  }\n}\n\nexport default NotFound;\n","// api.js\n// - allows us to handle our API catch() all in one place\n// - allows us to define settings for all our API requests\n// - allows us to define reusable API functions\n\nimport axios from \"axios\";\n\n// create an Axios object with pre-configured settings\nconst backendApi = axios.create({\n  baseURL: process.env.REACT_APP_BACKEND_URL,\n  // send cookies to the backend on every request (for logged-in users)\n  withCredentials: true\n});\n\nfunction errorHandler(err) {\n  // console.log() error info for debugging\n  if (err.response && err.response.data) {\n    console.log(\"API Error\", err.response.data);\n  } else {\n    console.log(\"React Code Error\", err);\n  }\n\n  // alert a generic message for the user\n  alert(\"Sorry! Something went wrong. Try again later.\");\n\n  // cause the error again so the .then() won't be called\n  throw err;\n}\n\nexport function getPhoneList() {\n  return backendApi.get(\"/api/phones\").catch(errorHandler);\n}\n\nexport function getPhoneDetails(phoneId) {\n  return backendApi.get(`/api/phones/${phoneId}`).catch(errorHandler);\n}\n\nexport function postPhone(newPhoneSubmission) {\n  return backendApi.post(\"/api/phones\", newPhoneSubmission).catch(errorHandler);\n}\n\nexport function postSignUp(userSubmission) {\n  return backendApi\n    .post(\"/api/process-signup\", userSubmission)\n    .catch(errorHandler);\n}\n\nexport function postLogIn(loginCredentials) {\n  return backendApi\n    .post(\"/api/process-login\", loginCredentials)\n    .catch(errorHandler);\n}\n\nexport function getLogOut() {\n  return backendApi.get(\"/api/logout\").catch(errorHandler);\n}\n\nexport function postFile(files) {\n  // create a FormData object that packages up the file for uploading\n  const uploadData = new FormData();\n  // add the first file to the uploadData \"package\"\n  // (the name \"userFile\" is the one the backend is expecting)\n  uploadData.append(\"userFile\", files[0]);\n\n  return backendApi.post(\"/api/single-upload\", uploadData).catch(errorHandler);\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./RecentPhones.css\";\nimport { getPhoneList } from \"../api.js\";\n\n// returns the dynamic URL for phone details\nfunction getPhoneAddress(phone) {\n  return `/phone-details/${phone._id}`;\n}\n\nclass RecentPhones extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      phoneArray: []\n    };\n  }\n\n  // componentDidMount() is called automatically by React when the page loads\n  componentDidMount() {\n    // get data from our Express API (localhost:5555)\n    getPhoneList().then(response => {\n      // ALWAYS console.log() response.data to see what the API gave you\n      console.log(\"Recent Phones\", response.data);\n      // save the JSON data from the API into the state\n      this.setState({ phoneArray: response.data });\n    });\n  }\n\n  render() {\n    const { phoneArray } = this.state;\n    return (\n      <section className=\"RecentPhones\">\n        <h2>New Phone Releases</h2>\n\n        <Link to=\"/add-phone\">Submit a New Phone</Link>\n\n        <ul>\n          {phoneArray.map(onePhone => {\n            return (\n              <li key={onePhone._id}>\n                <h3>\n                  <Link to={getPhoneAddress(onePhone)}>\n                    {onePhone.phoneModel}\n                  </Link>\n                </h3>\n                <p>by {onePhone.brand}</p>\n                <p>€{onePhone.price}</p>\n                <img src={onePhone.image} />\n              </li>\n            );\n          })}\n        </ul>\n      </section>\n    );\n  }\n}\n\nexport default RecentPhones;\n","import React, { Component } from \"react\";\n\nimport \"./PhoneDetails.css\";\nimport { getPhoneDetails } from \"../api.js\";\n\nclass PhoneDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      phoneItem: {}\n    };\n  }\n\n  componentDidMount() {\n    // get path params from React Router props\n    const { params } = this.props.match;\n    // use the ID in path params to get the details from the backend API\n    getPhoneDetails(params.phoneId).then(response => {\n      // ALWAYS console.log() response.data to see what the API gave you\n      console.log(\"Phone Details\", response.data);\n      // save the JSON data from the API into the state\n      this.setState({ phoneItem: response.data });\n    });\n  }\n\n  render() {\n    const { phoneItem } = this.state;\n    return (\n      <section className=\"PhoneDetails\">\n        <h2>Phone Details</h2>\n\n        <h3>{phoneItem.phoneModel}</h3>\n        <p>\n          by <i>{phoneItem.brand}</i>\n        </p>\n        <b>€{phoneItem.price}</b>\n\n        <img src={phoneItem.image} />\n\n        <h4>Specs</h4>\n        <p>{phoneItem.specs}</p>\n\n        <p>Product no. {phoneItem._id}</p>\n        <p>Added on {phoneItem.createdAt}</p>\n      </section>\n    );\n  }\n}\n\nexport default PhoneDetails;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport \"./AddPhone.css\";\nimport { postPhone, postFile } from \"../api.js\";\n\nclass AddPhone extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      phoneModel: \"\",\n      brand: \"\",\n      price: \"\",\n      image: \"\",\n      specs: \"\",\n      isSubmitSuccessful: false\n    };\n  }\n\n  genericOnChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    // send this.state (user inputs) to the backend for SAVING!\n    postPhone(this.state).then(response => {\n      console.log(\"Add Phone\", response.data);\n      // update the state for our redirect\n      this.setState({ isSubmitSuccessful: true });\n    });\n  }\n\n  uploadOnChange(event) {\n    const { name, files } = event.target;\n\n    postFile(files).then(response => {\n      console.log(\"Upload File Info\", response.data);\n      this.setState({ [name]: response.data.fileUrl });\n    });\n  }\n\n  render() {\n    return this.state.isSubmitSuccessful ? (\n      // returning the <Redirect /> ONLY works inside RENDER\n      <Redirect to=\"/recent-phones\" />\n    ) : (\n      <section className=\"AddPhone\">\n        <h2>Add a Phone</h2>\n\n        <form onSubmit={event => this.handleSubmit(event)}>\n          <label>\n            Model:{\" \"}\n            <input\n              onChange={event => this.genericOnChange(event)}\n              value={this.state.phoneModel}\n              name=\"phoneModel\"\n              type=\"text\"\n              placeholder=\"iPhone Xs\"\n            />\n          </label>\n\n          <label>\n            Brand:{\" \"}\n            <input\n              onChange={event => this.genericOnChange(event)}\n              value={this.state.brand}\n              name=\"brand\"\n              type=\"text\"\n              placeholder=\"Apple\"\n            />\n          </label>\n\n          <label>\n            Price:{\" \"}\n            <input\n              onChange={event => this.genericOnChange(event)}\n              value={this.state.price}\n              name=\"price\"\n              type=\"number\"\n              placeholder=\"1155\"\n            />\n          </label>\n\n          <label>\n            Image:{\" \"}\n            <input\n              onChange={event => this.uploadOnChange(event)}\n              name=\"image\"\n              type=\"file\"\n            />\n          </label>\n          <img src={this.state.image} />\n\n          <label>\n            Specs:{\" \"}\n            <input\n              onChange={event => this.genericOnChange(event)}\n              value={this.state.specs}\n              name=\"specs\"\n              type=\"text\"\n              placeholder=\"great camera, 8 hour battery\"\n            />\n          </label>\n\n          <button>Submit This Phone</button>\n        </form>\n      </section>\n    );\n  }\n}\n\nexport default AddPhone;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport \"./LoginPage.css\";\nimport { postLogIn } from \"../api.js\";\n\nclass LoginPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      originalPassword: \"\"\n    };\n  }\n\n  genericOnChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    postLogIn(this.state).then(response => {\n      console.log(\"Log In\", response.data);\n      // use the method sent as a prop by App.js to update currentUser\n      this.props.loginSuccess(response.data);\n    });\n  }\n\n  render() {\n    // currentUser is now sent by App.js as a prop\n    return this.props.currentUser ? (\n      // returning the <Redirect /> ONLY works inside RENDER\n      <Redirect to=\"/recent-phones\" />\n    ) : (\n      <section className=\"LoginPage\">\n        <h2>Log In</h2>\n\n        <form onSubmit={event => this.handleSubmit(event)}>\n          <label>\n            Email:\n            <input\n              onChange={event => this.genericOnChange(event)}\n              value={this.state.email}\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"rose@tico.com\"\n            />\n          </label>\n\n          <label>\n            Password\n            <input\n              onChange={event => this.genericOnChange(event)}\n              value={this.state.originalPassword}\n              name=\"originalPassword\"\n              type=\"password\"\n              placeholder=\"f1nn ru13z\"\n            />\n          </label>\n\n          <button>Log In</button>\n        </form>\n      </section>\n    );\n  }\n}\n\nexport default LoginPage;\n","import React, { Component } from \"react\";\n\nimport \"./SignupPage.css\";\nimport { postSignUp } from \"../api.js\";\n\nclass SignupPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fullName: \"\",\n      email: \"\",\n      originalPassword: \"\"\n    };\n  }\n\n  genericOnChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    postSignUp(this.state).then(response => {\n      console.log(\"Sign Up Result\", response.data);\n      // use the method sent as a prop by App.js to update currentUser\n      this.props.signupSuccess(response.data);\n    });\n  }\n\n  render() {\n    // currentUser is now sent by App.js as a prop\n    const { currentUser } = this.props;\n    return (\n      <section className=\"SignupPage\">\n        {currentUser ? (\n          <div>\n            <h2>You are signed up!</h2>\n            <p>\n              Welcome, {currentUser.fullName}! Your user ID is{\" \"}\n              <b>{currentUser._id}</b>.\n            </p>\n          </div>\n        ) : (\n          <div>\n            <h2>Sign Up</h2>\n\n            <form onSubmit={event => this.handleSubmit(event)}>\n              <label>\n                Full Name:\n                <input\n                  onChange={event => this.genericOnChange(event)}\n                  value={this.state.fullName}\n                  name=\"fullName\"\n                  type=\"text\"\n                  placeholder=\"Rey\"\n                />\n              </label>\n\n              <label>\n                Email:\n                <input\n                  onChange={event => this.genericOnChange(event)}\n                  value={this.state.email}\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"rey@jedi.com\"\n                />\n              </label>\n\n              <label>\n                Password:\n                <input\n                  onChange={event => this.genericOnChange(event)}\n                  value={this.state.originalPassword}\n                  name=\"originalPassword\"\n                  type=\"password\"\n                  placeholder=\"It's a secret...\"\n                />\n              </label>\n\n              <button>Sign Up</button>\n            </form>\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default SignupPage;\n","import React, { Component } from \"react\";\nimport { Switch, Route, NavLink } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport HomePage from \"./components/HomePage\";\nimport NotFound from \"./components/NotFound\";\nimport RecentPhones from \"./components/RecentPhones\";\nimport PhoneDetails from \"./components/PhoneDetails\";\nimport AddPhone from \"./components/AddPhone\";\nimport LoginPage from \"./components/LoginPage\";\nimport SignupPage from \"./components/SignupPage\";\nimport { getLogOut } from \"./api\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    // get the initial value of currentUser from localStorage\n    let userInfo = localStorage.getItem(\"currentUser\");\n    if (userInfo) {\n      // turn the string back into an object if we are logged in\n      userInfo = JSON.parse(userInfo);\n    }\n    this.state = {\n      currentUser: userInfo\n    };\n  }\n\n  updateUser(newUser) {\n    if (newUser) {\n      // save the user info in localStorage if we are logging IN\n      // (turn it into a JSON string before we save)\n      localStorage.setItem(\"currentUser\", JSON.stringify(newUser));\n    } else {\n      // delete the user info from localStorage if we are logging OUT\n      localStorage.removeItem(\"currentUser\");\n    }\n    this.setState({ currentUser: newUser });\n  }\n\n  logoutClick() {\n    getLogOut().then(response => {\n      console.log(\"Log Out\", response.data);\n      // set the currentUser state to empty\n      this.updateUser(null);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Ironphones</h1>\n\n          <nav>\n            {/* NavLink to the home page should ALWAYS have exact on it */}\n            <NavLink exact to=\"/\">\n              Home\n            </NavLink>\n\n            <NavLink to=\"/recent-phones\">New Releases</NavLink>\n\n            {this.state.currentUser ? (\n              <span>\n                <b>{this.state.currentUser.email}</b>\n                <button onClick={() => this.logoutClick()}>Log Out</button>\n              </span>\n            ) : (\n              <span>\n                <NavLink to=\"/signup-page\">Sign Up</NavLink>\n                <NavLink to=\"/login-page\">Log In</NavLink>\n              </span>\n            )}\n          </nav>\n        </header>\n\n        <Switch>\n          {/* home page route should ALWAYS have exact on it */}\n          <Route exact path=\"/\" component={HomePage} />\n\n          <Route path=\"/recent-phones\" component={RecentPhones} />\n          <Route path=\"/phone-details/:phoneId\" component={PhoneDetails} />\n          <Route path=\"/add-phone\" component={AddPhone} />\n\n          {/* Use render instead of component to send props */}\n          <Route\n            path=\"/signup-page\"\n            render={() => {\n              return (\n                <SignupPage\n                  // send App's currentUser state as a prop to SignupPage\n                  currentUser={this.state.currentUser}\n                  // send App's updateUser() method as a prop for updating state\n                  signupSuccess={user => this.updateUser(user)}\n                />\n              );\n            }}\n          />\n          <Route\n            path=\"/login-page\"\n            render={() => {\n              return (\n                <LoginPage\n                  // send App's currentUser state as a prop to LoginPage\n                  currentUser={this.state.currentUser}\n                  // send App's updateUser() method as a prop for updating state\n                  loginSuccess={user => this.updateUser(user)}\n                />\n              );\n            }}\n          />\n\n          {/* 404 route should go LAST */}\n          <Route component={NotFound} />\n        </Switch>\n\n        <footer>\n          <p>Made with 📱 at Ironhack</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}